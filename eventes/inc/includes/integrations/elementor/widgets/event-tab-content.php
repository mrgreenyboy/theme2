<?phpnamespace Elementor;if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directlyclass Elementor_Tabs_content extends Widget_Base {	public function get_name() {		return 'Elementor-Tabs-content';	}	public function get_title() {		return __( '<strong>Zc</strong> > Event Tabs Content' ,'eventes' );	}	public function get_icon() {			return 'eicon-icon-box';	}	protected function _register_controls() {		$traits = new \eventes_Elementor_Traits($this);		$this->start_controls_section(			'Features_section',			['label' => esc_html__( 'event tabs','eventes'),]		);		      $this->add_control(			'the_row',			[				'label' => __( 'Repeator Text','eventes'),				'type' => Controls_Manager::REPEATER,				'fields' => [										 [						'name' => 'media_image',						'label' => __( 'media images' ,'eventes' ),						'type' => Controls_Manager::MEDIA,					 					  ],				  	[						'name' => 'title',						'label' => __( 'Event Title','eventes' ),						'type' => Controls_Manager::TEXT,                         'default' => 'TAB1',					],																				[						'name' => 'name',						'label' => __( 'Speaker Name','eventes'),						'type' => Controls_Manager::TEXT,					],										[						'name' => 'positions',						'label' => __( 'Speaker Positions','eventes'),						'type' => Controls_Manager::TEXT,					],										[						'name' => 'Coffee',						'label' => __( 'Coffee Icon Text ','eventes'),						'type' => Controls_Manager::TEXT,					],										[						'name' => 'video',						'label' => __( 'Video Icon Text','eventes'),						'type' => Controls_Manager::TEXT,					],										[						'name' => 'time',						'label' => __( 'Time','eventes'),						'type' => Controls_Manager::TEXT,					],										[						'name' => 'locations',						'label' => __( 'Locations Text','eventes'),						'type' => Controls_Manager::TEXT,					],					[						'name' => 'icon',						'label' => __( 'Icon Event','eventes'),						'type' => Controls_Manager::TEXT,					],					[						'name' => 'contents',						'label' => __( 'Content Text','eventes'),						'type' => Controls_Manager::TEXTAREA,					],																				[						'name' => 'button',												'label' => esc_html__( 'Buy Ticket Button' ,'eventes'),						'type' => Controls_Manager::TEXT,					],										[						'name' => 'button-read',												'label' => esc_html__( 'Read More Button' ,'eventes'),						'type' => Controls_Manager::TEXT,					],						   					],			]		);         		$this->end_controls_section();				$this->start_controls_section(			'section_tabs_style',			[				'label' => __( 'Tabs', 'eventes' ),				'tab' => Controls_Manager::TAB_STYLE,			]		);		$this->add_control(			'navigation_width',			[				'label' => __( 'Navigation Width', 'eventes' ),				'type' => Controls_Manager::SLIDER,				'default' => [					'unit' => '%',				],				'range' => [					'%' => [						'min' => 10,						'max' => 50,					],				],				'selectors' => [					'{{WRAPPER}} .elementor-widget-container' => 'width: {{SIZE}}{{UNIT}}',				],				'condition' => [					'type' => 'vertical',				],			]		);		$this->add_control(			'border_width',			[				'label' => __( 'Border Width', 'eventes' ),				'type' => Controls_Manager::SLIDER,				'default' => [					'size' => 1,				],				'range' => [					'px' => [						'min' => 0,						'max' => 10,					],				],				'selectors' => [					'{{WRAPPER}} .elementor-tab-title, {{WRAPPER}} .elementor-tab-title:before, {{WRAPPER}} .elementor-tab-title:after, {{WRAPPER}} .elementor-tab-content, {{WRAPPER}} .elementor-tabs-content-wrapper' => 'border-width: {{SIZE}}{{UNIT}};',				],			]		);		$this->add_control(			'border_color',			[				'label' => __( 'Border Color', 'eventes' ),				'type' => Controls_Manager::COLOR,				'scheme' => [					'type' => Scheme_Color::get_type(),					'value' => Scheme_Color::COLOR_1,				],				'default' => '#fff',				'selectors' => [										'{{WRAPPER}} .spicel-features ul li:hover::before' => 'border-color: {{VALUE}} !important;',				],			]		);		$this->add_control(			'primary',			[				'label' => __( 'Primary Color', 'eventes' ),				'type' => Controls_Manager::COLOR,								'scheme' => [					'type' => Scheme_Color::get_type(),					'value' => Scheme_Color::COLOR_1,				],				'default' => '#e72c30',				'selectors' => [					'{{WRAPPER}} .spicel-features a.nav-item.nav-link.active,{{WRAPPER}} .spicel-features a.nav-item.nav-link:hover,{{WRAPPER}} .spicel-features .rbtn,{{WRAPPER}} .spicel-features ul li:hover::before' => 'background: {{VALUE}} !important;',					'{{WRAPPER}} .spicel-features .rbtn' => 'border-color: {{VALUE}}',					'{{WRAPPER}} .spicel-features .title h5,{{WRAPPER}} .spicel-features ul li::before' => 'color: {{VALUE}};',					'{{WRAPPER}} #preview nav > div a.nav-item.nav-link.active::after' => 'border-top-color: {{VALUE}} !important;',				],							]		);				$this->add_control(			'primary_hover',			[				'label' => __( 'Primary Hover', 'eventes' ),				'type' => Controls_Manager::COLOR,								'scheme' => [					'type' => Scheme_Color::get_type(),					'value' => Scheme_Color::COLOR_1,				],				'default' => '#fff',				'selectors' => [										'{{WRAPPER}} .spicel-features ul li:hover::before' => 'color: {{VALUE}};',										'{{WRAPPER}} .spicel-features .rbtn:hover' => 'background: {{VALUE}} !important;;',									],							]		);		$this->add_control(			'heading_content',			[				'label' => __( 'Content', 'eventes' ),				'type' => Controls_Manager::HEADING,				'separator' => 'before',			]		);		$this->add_control(			'content_color',			[				'label' => __( 'Color', 'eventes' ),				'type' => Controls_Manager::COLOR,				'scheme' => [					'type' => Scheme_Color::get_type(),					'value' => Scheme_Color::COLOR_1,				],				'default' => '#7b76ab',				'selectors' => [										'{{WRAPPER}} .spicel-features ul li,{{WRAPPER}} .spicel-features p' => 'color: {{VALUE}};',						],			]		);		$this->add_group_control(			Group_Control_Typography::get_type(),			[				'name' => 'content_typography',				'selector' => '{{WRAPPER}} .spicel-features ul li,{{WRAPPER}} .spicel-features p',				'scheme' => Scheme_Typography::TYPOGRAPHY_3,			]		);		$this->end_controls_section();		}		protected function render( $instance = [] ) {		eventes_el()->get_section('event-tab-content', [			'rows' => $this->get_settings('the_row'),			'column_section_data' => $this->get_settings('column_section'),			]);	}	protected function content_template() {}	public function render_plain_content() {}}Plugin::instance()->widgets_manager->register_widget_type( new Elementor_Tabs_content() );